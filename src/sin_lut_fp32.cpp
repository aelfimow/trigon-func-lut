#include "sin_lut_fp32.h"
#include <cmath>

namespace sin_lut_fp32
{
    fp32 to_rad(unsigned int value)
    {
        fp32 const pi = 3.1415926535897932384626433832795f;

        fp32 const grad = static_cast<fp32>(value);

        return ((2.0f * pi * grad) / 360.0f);
    }

    lut_func_t const lut[MAX_LUT_ELEM]
    {
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); },
        []() -> fp32 { return sinf(to_rad(0U)); }
    };
}
